{
  "title": "Matt Finucane - TunedIn",
  "description": "A single-page web application delivering TV based content to users.",
  "slug": "projects/tunedin",
  "root": {
    "content": [
      {
        "tagName": "section",
        "content": [
          {
            "tagName": "h1",
            "content": "TunedIn"
          },
          {
            "tagName": "h2",
            "content": "A single-page web application delivering TV based content to users"
          }
        ]
      },
      {
        "tagName": "section",
        "content": [
          {
            "tagName": "p",
            "content": "The TunedIn web application primarily acted as an interactive TV guide that would allow the users to scrub through a timeline and see what was on TV at any point in time."
          },
          {
            "tagName": "p",
            "content": "Alongside this, another section was added which contained curated content. This allowed content providers to deliver interactive content in real time, depending on what was on TV at the time. This would allow the user to partipate while watching TV."
          },
          {
            "tagName": "p",
            "content": "This was the first single page web application I ever built, and here is how we did it:"
          }
        ]
      },
      {
        "tagName": "ul",
        "content": [
          {
            "tagName": "li",
            "content": "[Meteor](https://meteor.com) was chosen as the client side framework becasue it was clean and lightweight. The Blaze rendering engine was quite fast and the Handlebars templating engine was elegant to work with."
          },
          {
            "tagName": "li",
            "content": "[Grunt](https://gruntjs.com) was the prevalent Javascript task runner at the time, and we used this to bundle dependencies together. Styling was handled using the [LESS](http://lesscss.org/) framework."
          },
          {
            "tagName": "li",
            "content": "The test runner used was [Mocha](https://mochajs.org/) and test stubs and spies were handled using [SinonJS](http://sinonjs.org/). For assertions, we used [Chai](http://chaijs.com/)."
          }
        ]
      },
      {
        "tagName": "section",
        "content": [
          {
            "tagName": "p",
            "content": "An interesting challenge we encountered was having to de-couple the server side code from the client side. At the time we were using it, Meteor was a full-stack framework which had it's own Mongo engine running isomorphically. Our app was fed by data coming from a REST API server written in PHP, which would have been much easier to scale to user demand."
          }
        ]
      }
    ]
  }
}
